# -*- coding: utf-8 -*-
# This script has been auto-generated by Micromine Origin 2022.5 [03.05.2024 10:53:30].

import os
import shutil
from pathlib import Path

path = str(Path(__file__).resolve().parent.parent)
print(path)
os.chdir(path)

temp_folder = os.path.join(path, 'temp')
report_folder = os.path.join(temp_folder, 'reports') 
tables_folder = os.path.join(temp_folder, 'tables')

import sqlite3
import boundaries
from boundaries import p_dict, l_dict, pk_dict, grl_dict
from stats import make_stats, restyle_reports



tridb = 'C:\\Users\\UskovVR\\Desktop\\Медь_Панель_0_110-76.TRIDB'
tridb_short_index = tridb.lower().index('.tridb')
tridb_short = tridb[:tridb_short_index]

slices = os.path.join(temp_folder, 'set.tridb')

name = 'М-О'

bm = 'C:\\Users\\UskovVR\\Desktop\\Медь_Панель_0_110-76.DAT'
bm_short_index = bm.lower().index('.dat')
bm_short = bm[:bm_short_index]

prom_type = '4' # M-O

# mode = 'single'
mode = 'multiple'
planes = 'МЕРИДИОНАЛЬНАЯ_ПК'
# planes = 'МЕРИДИОНАЛЬНАЯ_ГР_Л'

statistics = True

def create_set():
    listdir = os.listdir(temp_folder)
    if 'set.tridb' in listdir:
        os.remove(os.path.join(temp_folder, 'set.tridb'))
        
    MMpy.set_api_version(1, 0, 0)  # Set MMpy API version for compatibility
    formset0 = MMpy.FormSet(742, '21.5.318.2')  # WIREFRAME_CREATE_TYPE - Новый тип каркаса [WIREFRAME_CREATE_TYPE]: Создать новый тип каркаса, используя уже имеющийся тип в качестве шаблона 
    formset0.set_field(2, os.path.join(temp_folder, 'set'))  # TYPE_NAME, type:filename
    formset0.set_field(3, True)  # BOOL, type:boolean
    formset0.set_field(5, os.path.join(temp_folder, 'set_template'))  # TEMPLATE_NAME, type:filename
    formset0.run()
    
create_set()
# 
def planes_slices(tridb, name):

    MMpy.set_api_version(1, 0, 0)  # Set MMpy API version for compatibility
    datagrid0 = MMpy.DataGrid(2, 1)  # GRID
    datagrid0.set_column_info(0, 1, -1)  # Значение, type:value
    datagrid0.set_column_info(1, 0, 8)  # Атрибут, определенный пользователем, type:value
    datagrid0.set_row(0, ['', ''])
    formset0 = MMpy.FormSet(717, '21.5.318.2')  # PLANES_SLICE_WF - Разрезать каркас плоскостями [WF_SPLIT_PLANES]: Разрезать каркас на слои, используя серию регулярных плоскостей или контрольный файл разрезов
    formset0.set_field(2, tridb)  # IN_WF_TYPE, type:filename
    formset0.set_field(4, name)  # WF_NAME
    formset0.set_field(6, os.path.join(temp_folder, 'set'))  # OUT_WF_TYPE, type:filename
    formset0.set_field(8, '')  # PREFIX, type:string
    formset0.set_field(9, 0)  # ORT_BOOL, type:choice
    formset0.set_field(10, 0)  # SWITCH, type:choice
    formset0.set_field(11, 0)  # TRANS_BOOL, type:choice
    formset0.set_field(26, 1)  # SECT_BOOL, type:choice
    formset0.set_field(28, planes)  # FILE, type:filename
    formset0.set_field(30, False)  # AUTOLOAD, type:boolean
    formset0.set_field(32, MMpy.Colour(0, 0, 100))  # OUT_COLOUR, type:colour
    formset0.set_field(34, 1)  # SINGLE_BOOL, type:choice
    formset0.set_field(35, 0)  # SET_BOOL, type:choice
    formset0.set_field(36, '')  # WFSET, type:formset
    formset0.set_field(38, '')  # START_NUM, type:string
    formset0.set_field(40, 1)  # INCREMENT, type:numeric
    formset0.set_field(121, os.path.join(temp_folder, 'set_template'))  # ATTRIBS_TYPE, type:filename
    formset0.set_field(122, '')  # ATTRIBS_NAME, type:string
    formset0.set_field(124, '')  # CODE, type:string
    formset0.set_field(126, MMpy.Colour(0, 0, 100))  # ATTRIBS_COLOUR, type:colour
    formset0.set_field(128, '')  # TITLE, type:string
    formset0.set_field(130, '')  # NOTES, type:string
    formset0.set_field(132, datagrid0)  # GRID, type:grid
    formset0.run()
    
planes_slices(tridb, name)



def make_report(tridb, name, rpt):

    MMpy.set_api_version(1, 0, 0)  # Set MMpy API version for compatibility
    datagrid0 = MMpy.DataGrid(1, 1)  # MATERIAL_GRID
    datagrid0.set_column_info(0, 1, 4)  # Поля категории , type:value
    datagrid0.set_row(0, ['2024-04'])
    datagrid1 = MMpy.DataGrid(3, 1)  # GRADE_GRID
    datagrid1.set_column_info(0, 2, 4)  # Поле содержаний, type:value
    datagrid1.set_column_info(1, 3, 6)  # Единица содержания, type:choice
    datagrid1.set_column_info(2, 4, 6)  # Единица полезного компонента, type:choice
    datagrid1.set_row(0, ['Ni', '0', '0'])
    datagrid1.set_row(1, ['Cu', '0', '0'])
    datagrid1.set_row(2, ['Co', '0', '0'])
    datagrid1.set_row(3, ['Pt', '1', '6'])
    datagrid1.set_row(4, ['Pd', '1', '6'])
    datagrid1.set_row(5, ['Rh', '1', '6'])
    datagrid1.set_row(6, ['Os', '1', '6'])
    datagrid1.set_row(7, ['Ir', '1', '6'])
    datagrid1.set_row(8, ['Ru', '1', '6'])
    datagrid1.set_row(9, ['Au', '1', '6'])
    datagrid1.set_row(10, ['Ag', '1', '6'])
    datagrid1.set_row(11, ['Se', '0', '0'])
    datagrid1.set_row(12, ['Te', '0', '0'])
    datagrid1.set_row(13, ['S', '0', '0'])
    datagrid2 = MMpy.DataGrid(3, 1)  # LIST
    datagrid2.set_column_info(0, 1, -1)  # От (Z), type:value
    datagrid2.set_column_info(1, 2, -1)  # До (Z), type:value
    datagrid2.set_column_info(2, 3, -1)  # Имя горизонта, type:value
    datagrid2.set_row(0, ['', '', ''])
    formset0 = MMpy.FormSet(224, '21.5.318.2')  # RESRPT - Отчет по блочной модели [OBMRES]: Отчет по содержаниям/тоннажу из блочной модели 
    formset0.set_field(1, bm)  # RESRPT_FILE, type:filename
    formset0.set_field(2, False)  # FILTER, type:boolean
    formset0.set_field(3, '')  # FLTNO, type:formset
    formset0.set_field(4, 'EAST')  # EAST_VAR, type:field
    formset0.set_field(5, 'NORTH')  # NORTH_VAR, type:field
    formset0.set_field(6, 'RL')  # L_VAR, type:field
    formset0.set_field(7, True)  # DATA, type:boolean
    formset0.set_field(15, 'ОБЪЕМНЫЙ_ВЕС')  # SG_VAR, type:field
    formset0.set_field(16, 0)  # DEFAULT, type:numeric
    formset0.set_field(17, '')  # OFF, type:formset
    formset0.set_field(18, rpt, MMpy.append_flag.none)  # OUT_FILE, type:filename
    formset0.set_field(19, '')  # VAR_1, type:field
    formset0.set_field(20, 0)  # TYPE_1, type:choice
    formset0.set_field(23, '')  # VAL_1, type:string
    formset0.set_field(24, '')  # VAR_2, type:field
    formset0.set_field(25, 0)  # TYPE_2, type:choice
    formset0.set_field(28, '')  # VAL_2, type:string
    formset0.set_field(29, '')  # VAR_3, type:field
    formset0.set_field(30, 0)  # TYPE_3, type:choice
    formset0.set_field(33, '')  # VAL_3, type:string
    formset0.set_field(34, '')  # VAR_4, type:field
    formset0.set_field(35, 0)  # TYPE_4, type:choice
    formset0.set_field(38, '')  # VAL_4, type:string
    formset0.set_field(39, '')  # VAR_5, type:field
    formset0.set_field(40, 0)  # TYPE_5, type:choice
    formset0.set_field(43, '')  # VAL_5, type:string
    formset0.set_field(44, 0)  # RESRPT_FILE_TYPE, type:choice
    formset0.set_field(45, 6)  # OUT_FILE_TYPE, type:choice
    formset0.set_field(46, '')  # FACTOR, type:field
    formset0.set_field(47, 0)  # CUTOFF_BOOL, type:choice
    formset0.set_field(48, '')  # RESRPT_CUTOFF_SET, type:formset
    formset0.set_field(49, 0)  # MIKBINS_BOOL, type:choice
    formset0.set_field(51, True)  # CALC_BOOL, type:boolean
    formset0.set_field(53, tridb)  # WF_TYPE, type:filename
    formset0.set_field(55, name)  # NAME
    formset0.set_field(56, 1)  # WF_BOOL, type:choice
    formset0.set_field(57, 0)  # SET_BOOL, type:choice
    formset0.set_field(59, '')  # WFOBJECTGROUP, type:formset
    formset0.set_field(60, True)  # FACTOR_BOOL, type:boolean
    formset0.set_field(61, datagrid0)  # MATERIAL_GRID, type:grid
    formset0.set_field(62, datagrid1)  # GRADE_GRID, type:grid
    formset0.set_field(63, 0)  # TOTALS, type:choice
    formset0.set_field(64, 1)  # FLAT, type:choice
    formset0.set_field(65, 0)  # COLOUR_BOOL, type:choice
    formset0.set_field(70, False)  # WASTE_BOOL, type:boolean
    formset0.set_field(71, False)  # RANGES_BOOL, type:boolean
    formset0.set_field(72, datagrid2)  # LIST, type:grid
    formset0.set_field(73, '')  # MIK_CUTOFF_SET, type:formset
    formset0.set_field(74, 1)  # GLOBAL, type:choice
    formset0.run()








def reports_to_xlsx():
    MMpy.set_api_version(1, 0, 0)  # Set MMpy API version for compatibility
    
    for rpt_name in os.listdir(report_folder):
        rpt_path = os.path.join(report_folder, rpt_name)
        xlsx_path = os.path.join(tables_folder, rpt_name)
        xlsx_path_index = xlsx_path.lower().index('.rpt')
        xlsx_path = xlsx_path[:xlsx_path_index]
        formset0 = MMpy.FormSet(715, '21.5.318.2')  # EXPORT2EXCEL - Экспорт MS Excel [EXPORTEXCEL]: Экспортировать данные в таблицу Microsoft Excel 
        formset0.set_field(1, xlsx_path)  # FILENAME, type:filename
        formset0.set_field(2, 1)  # FILETYPE, type:choice
        formset0.set_field(4, rpt_path)  # FILENAMEINPUT, type:filename
        formset0.set_field(5, 6)  # FILETYPEINPUT, type:choice
        formset0.set_field(7, False)  # BOOLEXECUTE, type:boolean
        formset0.set_field(8, 'Sheet')  # SHEETNAME
        formset0.set_field(9, True)  # INCLUDEHEADER, type:boolean
        formset0.set_field(10, False)  # BOLDHEADER, type:boolean
        formset0.set_field(12, False)  # INCLUDEMETADATA, type:boolean
        formset0.set_field(13, False)  # BOOL_FILTER, type:boolean
        formset0.set_field(14, '')  # INPUT_FILTER, type:formset
        formset0.set_field(17, '')  # METADATATITLE, type:string
        formset0.set_field(20, True)  # CHAR_MISSING, type:boolean
        formset0.set_field(21, True)  # BLANK_MISSING, type:boolean
        formset0.set_field(22, True)  # HALF_MISSING, type:boolean
        formset0.set_field(23, False)  # DESC, type:boolean
        formset0.set_field(24, False)  # UNIT, type:boolean
        formset0.set_field(25, False)  # LABELS, type:boolean
        formset0.run()
# 




def get_bounds(point, dict_): 

    min_range = float('inf')
    nearest_section = None
    for k,v in dict_.items():
        delta = abs(point-v)
        if delta < min_range:
            min_range = delta
            nearest_section = k
            value = point-v
    sep = None
    if point > 25986.5:
        sep = '+' if value > 0 else '-'
    else:
        sep = '-' if value > 0 else '+'

    delta = round(abs(value),2)
        
    if delta == 0.0:
        delta = ''
        sep = ''

    info = f'{nearest_section}{sep}{delta}'
    return info

def get_all_sections(start, end, dict_):
# все пикеты|ленты в которых лежит каркас
    new_dict = {}
    start_key = start
    end_key = end
    found_start = False
    found_end = False
    for key, value in dict_.items():
        if key == start_key:
            found_start = True
        if key == end_key:
            found_end = True
            new_dict[key] = value
        if found_start and not found_end:
            new_dict[key] = value

    return new_dict

folders = (Path(report_folder), Path(tables_folder))
for folder in folders:
    for item in folder.iterdir():
        if item.is_dir():
            shutil.rmtree(item)
        else:
            item.unlink()
            
if mode == 'multiple':
    conn = sqlite3.connect(slices)
    cursor = conn.cursor()
    cursor.execute(f"""
    SELECT Name 
    FROM GeneralInformation""")
    slices_list = [slice[0] for slice in cursor.fetchall()]
    conn.close()
    for slice in slices_list:
        conn = sqlite3.connect(slices)
        cursor = conn.cursor()
        cursor.execute(f"""SELECT Name
        FROM GeneralInformation
        WHERE Name=='{slice}'""")
        slice_name = cursor.fetchall()[0][0]
        conn.close()
        key = slice_name.replace('/', '_')
        rpt = os.path.join(report_folder, key)
        print(key)
        make_report(slices, slice_name, rpt)
        
elif mode == 'single':
    conn = sqlite3.connect(tridb)
    cursor = conn.cursor()
    cursor.execute(f"""select Name, XMinimum, XMaximum,
    YMinimum, YMaximum, ZMinimum, ZMaximum
    from GeneralInformation
    where Name=='{name}'""")
    mine_info = cursor.fetchall()
    conn.close()
    xmin = mine_info[0][1]; xmax = mine_info[0][2]
    ymin = mine_info[0][3]; ymax = mine_info[0][4]
    zmin = mine_info[0][5]; zmax = mine_info[0][6]
    start = get_bounds(ymax, pk_dict)
    end = get_bounds(ymin, pk_dict)
    rpt = os.path.join(report_folder, f'{start}_{end}')
    make_report(tridb, name, rpt)
reports_to_xlsx()

if statistics:
    make_stats(tables_folder, planes)
else:
    restyle_reports(tables_folder)

    



